type Message {
  id: ID!
  content: String!
  owner: String
  createdAt: String
  roomId: ID
}

type Score {
  id: ID!
  content: String!
  owner: String
  createdAt: String
  roomId: ID
}

type Room {
  id: ID!
  name: String
  messages(
    sortDirection: ModelSortDirection,
    limit: Int,
    nextToken: String
	): MessageConnection
  scores(
    sortDirection: ModelSortDirection,
    limit: Int,
    nextToken: String
	): ScoreConnection
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum ModelSortDirection {
  ASC
  DESC
}

type MessageConnection {
  items: [Message]
  nextToken: String
}

type ScoreConnection {
  items: [Score]
  nextToken: String
}

type RoomConnection {
  items: [Room]
  nextToken: String
}

type Query {
  getRoom(id: ID): Room
  listMessagesForRoom(roomId: ID, sortDirection: ModelSortDirection): MessageConnection
  listScoresForRoom(roomId: ID, sortDirection: ModelSortDirection): ScoreConnection
  listRooms(limit: Int): RoomConnection
}

type Mutation {
  createMessage(input: MessageInput): Message
  createScore(input: ScoreInput): Score
  createRoom(input: RoomInput): Room
}

input MessageInput {
  id: ID
  content: String!
  owner: String
  createdAt: String
  roomId: ID
}

input ScoreInput {
  id: ID
  content: String!
  owner: String
  createdAt: String
  roomId: ID
}

input RoomInput {
  id: ID
  name: String
}

type Subscription {
  onCreateRoom: Room
    @aws_subscribe(mutations: ["createRoom"])
  onCreateMessageByRoomId(roomId: ID): Message
    @aws_subscribe(mutations: ["createMessage"])
  onCreateScoreByRoomId(roomId: ID): Score
    @aws_subscribe(mutations: ["createScore"])
}
